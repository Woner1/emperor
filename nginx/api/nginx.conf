worker_processes 2;
worker_rlimit_nofile 31744;
worker_shutdown_timeout 10s ;

events {
	multi_accept        on;
	worker_connections  16384;
	use                 epoll;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format main  '$remote_addr - $remote_user [$time_iso8601] "$request" $request_method '
                        '$status $request_time $msec $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

    log_format main_json escape=json '{ "time": "$time_iso8601", '
                                    '"msec": "$msec", '
                                    '"remote_addr": "$remote_addr", '
                                    '"remote_user": "$remote_user", '
                                    '"body_bytes_sent": "$body_bytes_sent", '
                                    '"request_time": "$request_time", '
                                    '"status": "$status", '
                                    '"request": "$request", '
                                    '"request_method": "$request_method", '
                                    '"http_referrer": "$http_referer", '
                                    '"http_user_agent": "$http_user_agent", '
                                    '"x-forwarded-for": "$http_x_forwarded_for" '
                                    '}';

    log_format upstreaminfo '$remote_addr - [$http_x_real_ip] - $remote_user [$time_iso8601] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'
                            ' $request_length $request_time $req_id';

    access_log  logs/access.log upstreaminfo;

    error_log logs/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75s;
    types_hash_max_size 2048;
    server_tokens off;
    more_clear_headers server;

    gzip  on;
    gzip_disable "msie6";
    gzip_min_length 1024;
    gzip_buffers 4 16k;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/json text/xml;
    gzip_proxied any;

    proxy_connect_timeout                   60s;
    proxy_send_timeout                      75s;
    proxy_read_timeout                      75s;

    proxy_buffers 8 8k;
    proxy_ignore_client_abort on;

    client_header_timeout 75s;
    client_header_buffer_size 1k;
    client_body_timeout 75s;
    client_body_buffer_size 10K;
    client_max_body_size 100m;
    large_client_header_buffers 4 32k;

    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 180m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # Reverse proxies can detect if a client provides a X-Request-ID header, and pass it on to the backend server.
    # If no such header is provided, it can provide a random value.
    map $http_x_request_id $req_id {
      default   $http_x_request_id;

      ""        $request_id;

    }

    # take x_client_ip or x_real_ip
    # x_client_ip is set in nginx ingress manually while x_real_ip is provided by realip module
    map $http_x_client_ip $real_client_ip {
		default   $http_x_client_ip;
		""        $http_x_real_ip;
	  }

    upstream app {
      server 127.0.0.1:3000;
    }

    # used for following redirect during oauth login
    map $upstream_http_location $redirect_uri {
        default "users/auth/facebook/callback";
        "~(http|https)://[^/]+/(?<location_uri>.*)$" "$location_uri";
    }

    # api host
    server {
      listen 80;
      listen [::]:80;
      server_name _;

      # map /api/ request to /
      location / {
        proxy_set_header Connection "";
        proxy_set_header Proxy "";
        proxy_http_version     1.1;

        proxy_set_header X-Request-ID            $req_id;
        # Pass the original X-Forwarded-For
        proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;

        proxy_pass http://app/api/;
        proxy_set_header X-Real-IP  $real_client_ip;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For   $real_client_ip;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Port  $http_x_forwarded_proto;

        # force Accept header value to json
        proxy_set_header Accept application/json;
      }

      location ~* ^/(health|metrics)$ {
        access_log  off;

        proxy_pass http://app;
        proxy_set_header X-Real-IP  $real_client_ip;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For   $real_client_ip;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Port  $http_x_forwarded_proto;
      }

      # special handling for oauth 2.0
      location /users/auth/ {
        proxy_pass http://app/api/users/auth/;
        proxy_set_header X-Real-IP  $real_client_ip;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For   $real_client_ip;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Port  $http_x_forwarded_proto;

        proxy_intercept_errors on;
        error_page 301 302 = @handler;
      }
      location @handler {
        # follow redirect for oauth callback
        rewrite ^ /$redirect_uri break;
        proxy_pass http://app;
      }
    }

    # default server, used for NGINX healthcheck and access to nginx stats
    server {
      listen 1025;

      keepalive_timeout 0;
      gzip off;
      access_log off;

      location /healthz {
          return 200;
      }

      location / {
          content_by_lua_block {
              ngx.exit(ngx.HTTP_NOT_FOUND)
          }
      }
    }

}
